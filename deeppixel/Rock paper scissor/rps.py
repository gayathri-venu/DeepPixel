# -*- coding: utf-8 -*-
"""rps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSQNr5G4q1-xfisvGCp8deglhhMtQmLf
"""

!pip install -r requirements.txt

import cv2
import numpy as np
from keras_squeezenet import SqueezeNet
from keras.optimizers import Adam
from keras.utils import np_utils
from keras.layers import Activation, Dropout, Convolution2D, GlobalAveragePooling2D
from keras.models import Sequential
import tensorflow as tf
import os
import sys , traceback
import os

from google.colab import drive
drive.mount('/content/drive')

IMG_SAVE_PATH = "/content/drive/My Drive/rockpaperscissors"



game_classes = {
    "rock": 0,
    "paper": 1,
    "scissors": 2,
   
}

REV_CLASS_MAP = {
    0: "rock",
    1: "paper",
    2: "scissors",
    3: "none"
}

No_of_classess = len(game_classes)

No_of_classess

def mapper(val):
  return game_classes[val]

dataset = []
for directory in os.listdir(IMG_SAVE_PATH):
    path = os.path.join(IMG_SAVE_PATH, directory)
    if not os.path.isdir(path):
        continue
    for item in os.listdir(path):
        # to make sure no hidden files get in our way
        if item.startswith("."):
            continue
        img = cv2.imread(os.path.join(path, item))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = cv2.resize(img, (227, 227))
       
        

        dataset.append([img, directory])

def get_model():
    model = Sequential([
        SqueezeNet(input_shape=( 227, 227, 3), include_top=False),
        Dropout(0.5),
        Convolution2D( No_of_classess, (1, 1), padding='valid'),
        Activation('relu'),
        GlobalAveragePooling2D(),
        Activation('softmax')
    ])
    return model

data , labels = zip(*dataset)
labels = list(map(mapper, labels))

labels[2]

print(type(data))

data= np.array(data)
print(data.shape)

labels = np_utils.to_categorical(labels)

labels[2]

labels = np.array(labels)
print(type(labels))
print(labels.shape)

# define the model
model = get_model()
model.compile(
    optimizer=Adam(lr=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(data, labels, epochs=10 , validation_steps=None)

model.save("rock_paper_scissor.h5")

import matplotlib.pyplot as plt
from keras.models import load_model
from google.colab.patches import cv2_imshow

test_img = cv2.imread("0zoQAmDFXehOZsAp.png")
print(test_img.shape)
cv2_imshow(test_img)

test_img = cv2.cvtColor(test_img, cv2.COLOR_BGR2RGB)
test_img = cv2.resize(test_img, (227, 227))

cv2_imshow(test_img)

model = load_model("rock_paper_scissor.h5")

pred = model.predict(np.array([test_img]))
move_code = np.argmax(pred[0])
#move_name = mapper(move_code)

print(move_code)

def back_map(val):
    return REV_CLASS_MAP[val]

move_name = back_map(move_code)
print(move_name)

